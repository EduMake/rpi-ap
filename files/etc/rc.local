#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# RPi Network Conf Bootstrapper
 

createNetwork(){
    echo "Creating network"
    #stop the vanilla dnsmasq that does nowt
    service dnsmasq stop
    #take the wlan0 down
    ifconfig wlan0 down

    ifconfig wlan0 10.5.5.1 netmask 255.255.255.0 up
    hostapd -B /etc/hostapd/hostapd.conf
    sudo dnsmasq --interface=wlan0 --dhcp-range=10.5.5.100,10.5.5.150,255.255.255.0,12h --address=/#/10.5.5.1
    echo "Network created"
}

echo "================================="
echo "RPi Network Conf Bootstrapper 0.1"
echo "================================="
echo "Scanning for known WiFi networks"

#List of SSIDs to try before creating own  network
ssids=( 'SSID1' 'WiFiNetwork2' )
#Use this one to make it default to produceing its own network
#ssids=( )
connected=false
for ssid in "${ssids[@]}"
do
    if iwlist wlan0 scan | grep $ssid > /dev/null
    then
        echo "First WiFi in range has SSID:" $ssid
        echo "Starting supplicant for WPA/WPA2"
        wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null 2>&1
        echo "Obtaining IP from DHCP"
        if dhclient -1 wlan0
        then
            echo "Connected to WiFi"
            connected=true
            break
        else
            echo "DHCP server did not respond with an IP lease (DHCPOFFER)"
            wpa_cli terminate
            break
        fi
    else
        echo "Not in range, WiFi with SSID:" $ssid
    fi
done
 
if ! $connected; then
    createNetwork
fi

sudo python /path/to/server.py &
#make sure the the server responds to /success.txt with a start page

exit 0
