#!/bin/bash
#
# rc.local
#

# EduMake RPi Network Conf Bootstrapper
# Will scan for the network names (ssids= () below) and attach to one those if it can
# Will not be able to attach until those SSIDs are set up using wpa_cli (remember to save config)
# If can't attach to WiFi it will generate its own AP using the SSID etc in /etc/hostapd/hostapd.conf
#  and the IP addressing etc in createNetwork() below
# To set up a way physically force own AP (so you can force that behaviour even when at home base):-
#	Wire GPIO 14 and 15 together 
#	use raspi-config -> Serial to Disable shell and kernel messages on the serial connection.
# the code will check if the GPIO 14 and 15 are linked together (with a jumper / wire) and skip the searching if they are

ssids=( 'WiFi1' 'SSID2' )

createNetwork(){
    echo "Creating network using Own AP"
    #Stop the vanilla dnsmasq that does nowt
    service dnsmasq stop
    #Turn WiFi dongle wlan0 off
    ifconfig wlan0 down

	#Turn WiFi dongle wlan0 back on a Fixed IP
    ifconfig wlan0 10.5.5.1 netmask 255.255.255.0 up
    
    #Turn on the Soft Access Point
    hostapd -B /etc/hostapd/hostapd.conf
    
    #Turn on DHCP and DNS redirecting : so all DNS based (web) traffic comes to the RPi
    sudo dnsmasq --interface=wlan0 --dhcp-range=10.5.5.100,10.5.5.150,255.255.255.0,12h --address=/#/10.5.5.1
    echo "Network created"
}

echo "========================================="
echo "EduMake RPi Network Conf Bootstrapper 0.1"
echo "========================================="
 
if /etc/serialtest.py ; then
  echo "Jumper found - forcing Own AP"
  ssids=( )
else
  echo "Scanning for known WiFi networks"
fi

connected=false
for ssid in "${ssids[@]}"
do
    if iwlist wlan0 scan | grep $ssid > /dev/null
    then
        echo "First WiFi in range has SSID:" $ssid
        echo "Starting supplicant for WPA/WPA2"
        wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null 2>&1
        echo "Obtaining IP from DHCP"
        if dhclient -1 wlan0
        then
            echo "Connected to WiFi"
            connected=true
            break
        else
            echo "DHCP server did not respond with an IP lease (DHCPOFFER)"
            wpa_cli terminate
            break
        fi
    else
        echo "Not in range, WiFi with SSID:" $ssid
    fi
done
 
if ! $connected; then
    createNetwork
fi

#Launch Web Server
#For discover-ability make sure the the server responds to /success.txt with a start page

#sudo /path/to/server  &

exit 0
